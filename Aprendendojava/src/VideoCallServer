import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

public class VideoCallServer {

    private static final int PORT = 8080;
    private static final int BUFFER_SIZE = 1024;

    private List<Client> clients = new ArrayList<>();

    public static void main(String[] args) throws IOException {
        VideoCallServer server = new VideoCallServer();
        server.start();
    }

    private void start() throws IOException {
        ServerSocket serverSocket = new ServerSocket(PORT);

        while (true) {
            Socket socket = serverSocket.accept();
            Client client = new Client(socket);
            clients.add(client);

            client.start();
        }
    }

    private class Client extends Thread {

        private Socket socket;
        private String name;
        private DataInputStream inputStream;
        private DataOutputStream outputStream;

        public Client(Socket socket) throws IOException {
            this.socket = socket;
            this.inputStream = new DataInputStream(socket.getInputStream());
            this.outputStream = new DataOutputStream(socket.getOutputStream());
        }

        @Override
        public void run() {
            try {
                // Receive the user's name
                name = inputStream.readUTF();

                // Send the video call link to the user
                outputStream.writeUTF("https://example.com/videocall?name=" + name);

                // Send the list of participants to the user
                for (Client c : clients) {
                    outputStream.writeUTF(c.name);
                }

                // Receive and distribute audio and video data
                while (true) {
                    byte[] audio = new byte[BUFFER_SIZE];
                    int audioBytesRead = inputStream.read(audio);

                    byte[] video = new byte[BUFFER_SIZE];
                    int videoBytesRead = inputStream.read(video);

                    if (audioBytesRead == -1 || videoBytesRead == -1) {
                        // Client disconnected, remove from list
                        clients.remove(this);
                        break;
                    }

                    // Distribute audio and video data to other participants
                    for (Client c : clients) {
                        if (!c.equals(this)) {
                            c.outputStream.write(audio, 0, audioBytesRead);
                            c.outputStream.write(video, 0, videoBytesRead);
                        }
                    }
                }
            } catch (IOException e) {
                System.out.println(e);
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
